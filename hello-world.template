---
AWSTemplateFormatVersion: '2010-09-09'

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: 'Conjur Configuration'
        Parameters: 
          - ApplicanceURL

      - Label: 
          default: 'Demo Instance Configuration'
        Parameters:
          - VpcId 
          - InstanceSubnet
          - SourceNetwork
          - KeyName

    ParameterLabels: 
      ApplicanceURL:
        default: 'What is your Conjur hostname?'
      AdminPassword:
        default: 'Initial Admin Password'
      InstanceSubnet:
        default: 'Which Subnet will the demo instance be launched in?'
      SourceNetwork:
        default: 'From what CIDR can SSH/HTTPS connections be established to the demo instance?'
      VpcId:
        default: 'Which VPC will the demo instance be launched in?'
      KeyName:
        default: 'Which key pair will be used for SSH to the demo instance?'

Parameters:
  ApplicanceURL:
    Type: String

  InstanceSubnet:
    Type: AWS::EC2::Subnet::Id

  SourceNetwork:
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  VpcId:
    Type: AWS::EC2::VPC::Id

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
    RegionMap:
      ap-northeast-1:
        '64': 'ami-1913e77f'
      ap-northeast-2:
        '64': 'ami-9776aff9'
      ap-south-1:
        '64': 'ami-de413bb1'
      ap-southeast-1:
        '64': 'ami-032fb460'
      ap-southeast-2:
        '64': 'ami-e41a0287'
      ca-central-1:
        '64': 'ami-c2c779a6'
      eu-central-1:
        '64': 'ami-ec832a83'
      eu-west-1:
        '64': 'ami-1446b66d'
      eu-west-2:
        '64': 'ami-fb97869f'
      sa-east-1:
        '64': 'ami-411a6b2d'
      us-east-1:
        '64': 'ami-7b4d7900'
      us-east-2:
        '64': 'ami-44bf9f21'
      us-west-1:
        '64': 'ami-039ab163'
      us-west-2:
        '64': 'ami-7105e609'

Resources:
  DemoInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !Ref SourceNetwork
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SourceNetwork
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: '0.0.0.0/32'
      GroupDescription: Conjur Hostfactory Demo Security Group
      VpcId: !Ref VpcId

  DemoInstance:
    Type: AWS::EC2::Instance
    Properties: 
      IamInstanceProfile: !Ref DemoInstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', 64]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroupIds:
      - !Ref DemoInstanceSecurityGroup
      SubnetId: !Ref InstanceSubnet
      Tags: 
      - Key: Name
        Value: Conjur-Hostfactory-Demo
      UserData: 'String'

  HostfactoryBucket:
    Type: AWS::S3::Bucket

  IamAccessKeyRotatorPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ConjurHostfactoryDemoIamAccessKeys
      PolicyDocument:
        Statement:
        - Action:
          - 'iam:CreateAccessKey'
          - 'iam:ListAccessKeys'
          - 'iam:DeleteAccessKey'
          Effect: Allow
          Resource:
          - !GetAtt IamRotatedUser.Arn
      PolicyName: BucketBackupPolicy
      Users: 
        - !Ref IamRotatedUser

  IamRotatedUser:
    Type: AWS::IAM::User

  IamAccessKey:
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName: !Ref IamRotatedUser

  BucketGetObjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ConjurHostfactoryDemoInstance
      PolicyDocument:
        Statement:
        - Action:
          - 's3:GetObject'
          Effect: Allow
          Resource:
          - !Join ['', ['arn:aws:s3:::', !Ref HostfactoryBucket]]
      Roles: 
        - !Ref DemoInstanceIamRole

  BucketFullPermissionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ConjurHostfactoryDemoBucketPermissions
      PolicyDocument:
        Statement:
        - Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:DeleteObject'
          Effect: Allow
          Resource:
          - !Join ['', ['arn:aws:s3:::', !Ref HostfactoryBucket]]
      Users: 
        - !Ref IamRotatedUser

  DemoInstanceIamRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
        - Effect: Allow
          Action: 
          - 'sts:AssumeRole'
          Principal: 
            Service: 
            - 'ec2.amazonaws.com'

  DemoInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref DemoInstanceIamRole

Outputs:
  AccessKeyId:
    Description: Access key ID
    Value: !Ref IamAccessKey
  SecretAccessKey:
    Description: Secret access key
    Value: !GetAtt IamAccessKey.SecretAccessKey
  S3Bucket:
    Description: S3 bucket for hostfactory rotation
    Value: !Ref HostfactoryBucket