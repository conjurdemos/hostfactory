---
AWSTemplateFormatVersion: '2010-09-09'

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: 'Conjur Configuration'
        Parameters: 
          - ApplicanceURL

      - Label: 
          default: 'Demo Instance Configuration'
        Parameters:
          - VpcId 
          - InstanceSubnet
          - SourceNetwork
          - KeyName

    ParameterLabels: 
      ApplicanceURL:
        default: 'What is your Conjur hostname?'
      AdminPassword:
        default: 'Initial Admin Password'
      InstanceSubnet:
        default: 'Which Subnet will the demo instance be launched in?'
      SourceNetwork:
        default: 'From what CIDR can SSH/HTTPS connections be established to the demo instance?'
      VpcId:
        default: 'Which VPC will the demo instance be launched in?'
      KeyName:
        default: 'Which key pair will be used for SSH to the demo instance?'

Parameters:
  ApplicanceURL:
    Type: String

  InstanceSubnet:
    Type: AWS::EC2::Subnet::Id

  SourceNetwork:
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  VpcId:
    Type: AWS::EC2::VPC::Id

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
    RegionMap:
      ap-northeast-1:
        '64': 'ami-1913e77f'
      ap-northeast-2:
        '64': 'ami-9776aff9'
      ap-south-1:
        '64': 'ami-de413bb1'
      ap-southeast-1:
        '64': 'ami-032fb460'
      ap-southeast-2:
        '64': 'ami-e41a0287'
      ca-central-1:
        '64': 'ami-c2c779a6'
      eu-central-1:
        '64': 'ami-ec832a83'
      eu-west-1:
        '64': 'ami-1446b66d'
      eu-west-2:
        '64': 'ami-fb97869f'
      sa-east-1:
        '64': 'ami-411a6b2d'
      us-east-1:
        '64': 'ami-7b4d7900'
      us-east-2:
        '64': 'ami-44bf9f21'
      us-west-1:
        '64': 'ami-039ab163'
      us-west-2:
        '64': 'ami-7105e609'

Resources:
  DemoInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !Ref SourceNetwork
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SourceNetwork
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: '0.0.0.0/0'
      GroupDescription: Conjur Hostfactory Demo Security Group
      VpcId: !Ref VpcId

  DemoInstance:
    Type: AWS::EC2::Instance
    Properties: 
      IamInstanceProfile: !Ref DemoInstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', 64]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SecurityGroupIds:
      - !Ref DemoInstanceSecurityGroup
      SubnetId: !Ref InstanceSubnet
      Tags: 
      - Key: Name
        Value: Conjur-Hostfactory-Demo
      UserData: 
        Fn::Base64: 
          !Sub 
          - |
            #!/usr/bin/env bash
            set -ox pipefail

            HOME=/root

            appliance_url=${ApplicanceURL}
            s3_bucket=${HostfactoryBucket}

            apt-get update
            apt-get install -y awscli python

            curl -LO https://github.com/cyberark/conjur-cli/releases/download/v5.4.0/conjur_5.4.0-1_amd64.deb
            dpkg -i conjur_5.4.0-1_amd64.deb
            rm -f conjur_5.4.0-1_amd64.deb

            pushd /usr/local/bin
            curl -sSL https://github.com/cyberark/summon/releases/download/v0.6.5/summon-linux-amd64.tar.gz | tar xz

            mkdir -p /usr/local/lib/summon
            pushd /usr/local/lib/summon
            curl -sSL https://github.com/cyberark/summon-conjur/releases/download/v0.2.0/summon-conjur_v0.2.0_linux-amd64.tar.gz | tar xz

            popd
            popd

            git clone https://github.com/conjurdemos/hostfactory.git

            conjur init -h $appliance_url <<< yes

            instance_id=$(curl -s http://instance-data/latest/meta-data/instance-id)
            role_name=$(curl -s http://instance-data/latest/meta-data/iam/security-credentials/)

            while : ; do
              token=$(aws s3 cp s3://$s3_bucket/hello-world - 2>/dev/null)
              [[ $? == 1 ]] || break
              sleep 1s
            done

            conjur hostfactory hosts create "$token" "$instance_id" | conjurize | bash

            cd hostfactory/webapp
            summon ./server.py
          - HostfactoryBucket: !Ref HostfactoryBucket

  HostfactoryBucket:
    Type: AWS::S3::Bucket

  IamRotatedUser:
    Type: AWS::IAM::User

  IamAccessKey:
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName: !Ref IamRotatedUser

  BucketGetObjectPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ConjurHostfactoryDemoInstance
      PolicyDocument:
        Statement:
        - Action:
          - 's3:GetObject'
          Effect: Allow
          Resource:
          - !Join ['', ['arn:aws:s3:::', !Ref HostfactoryBucket]]
      Roles: 
        - !Ref DemoInstanceIamRole

  IamTokenManagerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ConjurHostfactoryDemoIamTokenManager
      PolicyDocument:
        Statement:
        - Action:
          - 's3:ListBucket'
          Effect: Allow
          Resource:
          - !Join ['', ['arn:aws:s3:::', !Ref HostfactoryBucket]]
        - Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:PutObjectAcl'
          - 's3:DeleteObject'
          Effect: Allow
          Resource:
          - !Join ['', ['arn:aws:s3:::', !Ref HostfactoryBucket, '/*']]
        - Action:
          - 'iam:GetRole'
          - 'iam:PutRolePolicy'
          Effect: Allow
          Resource:
          - !GetAtt DemoInstanceIamRole.Arn
        - Action:
          - 'iam:CreateAccessKey'
          - 'iam:ListAccessKeys'
          - 'iam:DeleteAccessKey'
          Effect: Allow
          Resource:
          - !GetAtt IamRotatedUser.Arn
      Users: 
        - !Ref IamRotatedUser

  DemoInstanceIamRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
        - Effect: Allow
          Action: 
          - 'sts:AssumeRole'
          Principal: 
            Service: 
            - 'ec2.amazonaws.com'

  DemoInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref DemoInstanceIamRole

Outputs:
  AccessKeyId:
    Description: Access key ID
    Value: !Ref IamAccessKey
  SecretAccessKey:
    Description: Secret access key
    Value: !GetAtt IamAccessKey.SecretAccessKey
  S3Bucket:
    Description: S3 bucket for hostfactory rotation
    Value: !Ref HostfactoryBucket
  InstanceRole:
    Description: Instance role
    Value: !Ref DemoInstanceIamRole
  DemoInstance:
    Description: Public DNS of the Hello-world demo instance
    Value: !GetAtt DemoInstance.PublicDnsName